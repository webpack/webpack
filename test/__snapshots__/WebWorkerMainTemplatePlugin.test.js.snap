// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebWorkerMainTemplatePlugin when applied bootstrap handler when chunks are provided returns the original source with chunk callback 1`] = `
"moduleSource()
this[\\"webpackChunk\\"] = function webpackChunkCallback(chunkIds, moreModules) {
for(var moduleId in moreModules) {
renderAddModuleSource();
}
while(chunkIds.length)
installedChunks[chunkIds.pop()] = 1;
};"
`;

exports[`WebWorkerMainTemplatePlugin when applied hot-bootstrap handler when called returns the original source with hot update callback 1`] = `
"moduleSource()
var parentHotUpdateCallback = this[\\"webpackHotUpdate\\"];
this[\\"webpackHotUpdate\\"] = function webpackHotUpdateCallback(chunkId, moreModules) {// eslint-disable-line no-unused-vars
	hotAddUpdateChunk(chunkId, moreModules);
	if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
} ;

function hotDownloadUpdateChunk(chunkId) {// eslint-disable-line no-unused-vars
	importScripts(requireFn.p + \\"asset-path\\" + abc123 + \\"\\" + abc123 + \\"\\" + chunkId + \\"\\");
}

function hotDownloadManifest(callback) {// eslint-disable-line no-unused-vars
	return new Promise(function (resolve, reject) {
		if (typeof XMLHttpRequest === \\"undefined\\")
		return reject(new Error(\\"No browser support\\"));
		try {
			var request = new XMLHttpRequest();
			var requestPath = requireFn.p + \\"asset-path\\" + abc123 + \\"\\" + abc123 + \\"\\";
			request.open(\\"GET\\", requestPath, true);
			request.timeout = 10000;
			request.send(null);
		} catch (err) {
			return reject(err);
		}
		request.onreadystatechange = function () {
			if (request.readyState !== 4) return;
			if (request.status === 0) {
				// timeout
				reject(new Error(\\"Manifest request to \\" + requestPath + \\" timed out.\\"));
			} else if (request.status === 404) {
				// no update available
				resolve();
			} else if (request.status !== 200 && request.status !== 304) {
				// other failure
				reject(new Error(\\"Manifest request to \\" + requestPath + \\" failed.\\"));
			} else {
				// success
				try {
					var update = JSON.parse(request.responseText);
				} catch (e) {
					reject(e);
					return;
				}
				resolve(update);
			}
		};
	});
}

function hotDisposeChunk(chunkId) {//eslint-disable-line no-unused-vars
	delete installedChunks[chunkId];
}"
`;

exports[`WebWorkerMainTemplatePlugin when applied local-vars handler when chunks are provided returns the original source with installed mapping 1`] = `
"moduleSource()

// object to store loaded chunks
// \\"1\\" means \\"already loaded\\"
var installedChunks = {
1: 1,
2: 1,
3: 1
};"
`;

exports[`WebWorkerMainTemplatePlugin when applied require-ensure handler when called creates import scripts call and promise resolve 1`] = `
"// \\"1\\" is the signal for \\"already loaded\\"
if(!installedChunks[chunkId]) {
importScripts(\\"asset-path\\" + abc123 + \\"\\" + abc123 + \\"\\" + chunkId + \\"\\");
}
return Promise.resolve();"
`;
