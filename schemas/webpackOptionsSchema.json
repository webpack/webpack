{
  "definitions": {
    "ruleSet-rules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ruleSet-rule"
      }
    },
    "ruleSet-rule": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "resource": {
          "$ref": "#/definitions/ruleSet-condition"
        },
        "issuer": {
          "$ref": "#/definitions/ruleSet-condition"
        },
        "test": {
          "$ref": "#/definitions/ruleSet-condition"
        },
        "include": {
          "$ref": "#/definitions/ruleSet-condition"
        },
        "exclude": {
          "$ref": "#/definitions/ruleSet-condition"
        },
        "enforce": {
          "enum": [
            "left",
            "right"
          ]
        },
        "loader": {
          "anyOf": [
            {
              "$ref": "#/definitions/ruleSet-loader"
            },
            {
              "$ref": "#/definitions/ruleSet-use"
            }
          ]
        },
        "loaders": {
          "anyOf": [
            {
              "$ref": "#/definitions/ruleSet-loader"
            },
            {
              "$ref": "#/definitions/ruleSet-use"
            }
          ]
        },
        "options": {
          "$ref": "#/definitions/ruleSet-query"
        },
        "query": {
          "$ref": "#/definitions/ruleSet-query"
        },
        "loaders": {
          "$ref": "#/definitions/ruleSet-use"
        },
        "use": {
          "$ref": "#/definitions/ruleSet-use"
        },
        "parser": {
          "type": "object",
          "additionalProperties": true
        },
        "rules": {
          "$ref": "#/definitions/ruleSet-rules"
        },
        "oneOf": {
          "$ref": "#/definitions/ruleSet-rules"
        }
      }
    },
    "ruleSet-use": {
      "anyOf": [
        {
          "$ref": "#/definitions/ruleSet-use-item"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ruleSet-use-item"
          }
        }
      ]
    },
    "ruleSet-use-item": {
      "anyOf": [
        {
          "$ref": "#/definitions/ruleSet-loader"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "loader": {
              "$ref": "#/definitions/ruleSet-loader"
            },
            "options": {
              "$ref": "#/definitions/ruleSet-query"
            },
            "query": {
              "$ref": "#/definitions/ruleSet-query"
            }
          }
        }
      ]
    },
    "ruleSet-loader": {
      "type": "string",
      "minLength": 1
    },
    "ruleSet-query": {
      "anyOf": [
        {
          "type": "object"
        },
        {
          "type": "string"
        }
      ]
    },
    "ruleSet-conditions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ruleSet-condition"
      }
    },
    "ruleSet-condition": {
      "anyOf": [
        {
          "instanceof": "RegExp"
        },
        {
          "type": "string",
          "minLength": 1
        },
        {
          "instanceof": "Function"
        },
        {
          "$ref": "#/definitions/ruleSet-conditions"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "and": {
              "$ref": "#/definitions/ruleSet-conditions"
            },
            "or": {
              "$ref": "#/definitions/ruleSet-conditions"
            },
            "not": {
              "$ref": "#/definitions/ruleSet-conditions"
            },
            "test": {
              "$ref": "#/definitions/ruleSet-condition"
            },
            "include": {
              "$ref": "#/definitions/ruleSet-condition"
            },
            "exclude": {
              "$ref": "#/definitions/ruleSet-condition"
            }
          }
        }
      ]
    },
    "common.nonEmptyArrayOfUniqueStringValues": {
      "items": {
        "type": "string",
        "minLength": 1
      },
      "minItems": 1,
      "type": "array",
      "uniqueItems": true
    },
    "common.arrayOfStringValues": {
      "items": {
        "type": "string",
        "minLength": 1
      },
      "type": "array"
    },
    "common.arrayOfStringOrStringArrayValues": {
      "items": {
        "anyOf": [
          {
            "type": "string",
            "minLength": 1
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        ]
      },
      "type": "array"
    },
    "entry": {
      "description": "The entry point(s) of the compilation.",
      "oneOf": [
        {
          "description": "Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/entry-item"
          }
        },
        {
          "$ref": "#/definitions/entry-item"
        }
      ]
    },
    "entry-item": {
      "description": "The entry point for one output file.",
      "oneOf": [
        {
          "description": "The string is resolved to a module which is loaded upon startup.",
          "type": "string",
          "minLength": 1
        },
        {
          "allOf": [
            {
              "$ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
            }
          ],
          "description": "All modules are loaded upon startup. The last one is exported."
        }
      ]
    },
    "externals": {
      "description": "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
      "anyOf": [
        {
          "description": "An exact matched dependency becomes external. The same string is used as external dependency.",
          "type": "string"
        },
        {
          "description": "If an dependency matches exactly a property of the object, the property value is used as dependency.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        {
          "description": "`function(context, request, callback(err, result))` The function is called on each dependency.",
          "instanceof": "Function"
        },
        {
          "description": "Every matched dependency becomes external.",
          "instanceof": "RegExp"
        },
        {
          "items": {
            "$ref": "#/definitions/externals"
          },
          "type": "array"
        }
      ]
    },
    "module": {
      "description": "Options affecting the normal modules (`NormalModuleFactory`).",
      "additionalProperties": false,
      "properties": {
        "rules": {
          "allOf": [
            {
              "$ref": "#/definitions/ruleSet-rules"
            }
          ],
          "description": "An array of rules applied for modules."
        },
        "loaders": {
          "allOf": [
            {
              "$ref": "#/definitions/ruleSet-rules"
            }
          ],
          "description": "An array of automatically applied loaders."
        },
        "noParse": {
          "description": "Don't parse files matching. It's matched against the full resolved request.",
          "oneOf": [
            {
              "items": {
                "instanceof": "RegExp"
              },
              "minItems": 1,
              "type": "array",
              "uniqueItems": true
            },
            {
              "instanceof": "RegExp"
            }
          ]
        },
        "unknownContextRequest": {
          "type": "string"
        },
        "unknownContextRegExp": {
          "instanceof": "RegExp"
        },
        "unknownContextRecursive": {
          "type": "boolean"
        },
        "unknownContextCritical": {
          "type": "boolean"
        },
        "exprContextRequest": {
          "type": "string"
        },
        "exprContextRegExp": {
          "instanceof": "RegExp"
        },
        "exprContextRecursive": {
          "type": "boolean"
        },
        "exprContextCritical": {
          "type": "boolean"
        },
        "wrappedContextRegExp": {
          "instanceof": "RegExp"
        },
        "wrappedContextRecursive": {
          "type": "boolean"
        },
        "wrappedContextCritical": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "output": {
      "additionalProperties": false,
      "description": "Options affecting the output of the compilation. `output` options tell webpack how to write the compiled files to disk.",
      "properties": {
        "auxiliaryComment": {
          "description": "Add a comment in the UMD wrapper.",
          "oneOf": [
            {
              "description": "Append the same comment above each import style.",
              "type": "string"
            },
            {
              "additionalProperties": false,
              "description": "Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.",
              "properties": {
                "amd": {
                  "type": "string"
                },
                "commonjs": {
                  "type": "string"
                },
                "commonjs2": {
                  "type": "string"
                },
                "root": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "hashFunction": {
          "type": "string",
          "minLength": 1
        },
        "hashDigest": {
          "type": "string",
          "minLength": 1
        },
        "hashDigestLength": {
          "type": "number",
          "minimum": 1
        },
        "chunkFilename": {
          "description": "The filename of non-entry chunks as relative path inside the `output.path` directory.",
          "type": "string"
        },
        "crossOriginLoading": {
          "description": "This option enables cross-origin loading of chunks.",
          "enum": [
            false,
            "anonymous",
            "use-credentials"
          ]
        },
        "devtoolFallbackModuleFilenameTemplate": {
          "description": "Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.",
          "type": "string"
        },
        "devtoolLineToLine": {
          "description": "Enable line to line mapped mode for all/specified modules. Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source. It’s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.",
          "oneOf": [
            {
              "description": "`true` enables it for all modules (not recommended)",
              "type": "boolean"
            },
            {
              "description": "An object similar to `module.loaders` enables it for specific files.",
              "properties": {
                "exclude": {
                  "type": "string"
                },
                "include": {
                  "type": "string"
                },
                "test": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "devtoolModuleFilenameTemplate": {
          "description": "Filename template string of function for the sources array in a generated SourceMap.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "instanceof": "Function"
            }
          ]
        },
        "filename": {
          "description": "Specifies the name of each output file on disk. You must **not** specify an absolute path here! The `output.path` option determines the location on disk the files are written to, filename is used solely for naming the individual files.",
          "type": "string"
        },
        "hotUpdateChunkFilename": {
          "description": "The filename of the Hot Update Chunks. They are inside the output.path directory.",
          "type": "string"
        },
        "hotUpdateFunction": {
          "description": "The JSONP function used by webpack for async loading of hot update chunks.",
          "type": "string"
        },
        "hotUpdateMainFilename": {
          "description": "The filename of the Hot Update Main File. It is inside the `output.path` directory.",
          "type": "string"
        },
        "jsonpFunction": {
          "description": "The JSONP function used by webpack for async loading of chunks.",
          "type": "string"
        },
        "library": {
          "description": "If set, export the bundle as library. `output.library` is the name.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "libraryTarget": {
          "enum": [
            "var",
            "assign",
            "this",
            "window",
            "global",
            "commonjs",
            "commonjs2",
            "commonjs-module",
            "amd",
            "umd",
            "umd2",
            "jsonp"
          ]
        },
        "path": {
          "description": "The output directory as **absolute path** (required).",
          "type": "string"
        },
        "pathinfo": {
          "description": "Include comments with information about the modules.",
          "type": "boolean"
        },
        "publicPath": {
          "description": "The `publicPath` specifies the public URL address of the output files when referenced in a browser.",
          "type": "string"
        },
        "sourceMapFilename": {
          "description": "The filename of the SourceMaps for the JavaScript files. They are inside the `output.path` directory.",
          "type": "string"
        },
        "sourcePrefix": {
          "description": "Prefixes every line of the source in the bundle with this string.",
          "type": "string"
        },
        "umdNamedDefine": {
          "description": "If `output.libraryTarget` is set to umd and `output.library` is set, setting this to true will name the AMD module.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "resolve": {
      "additionalProperties": false,
      "properties": {
        "modules": {
          "$ref": "#/definitions/common.arrayOfStringValues"
        },
        "descriptionFiles": {
          "$ref": "#/definitions/common.arrayOfStringValues"
        },
        "plugins": {
          "type": "array"
        },
        "mainFields": {
          "$ref": "#/definitions/common.arrayOfStringOrStringArrayValues"
        },
        "aliasFields": {
          "$ref": "#/definitions/common.arrayOfStringOrStringArrayValues"
        },
        "mainFiles": {
          "$ref": "#/definitions/common.arrayOfStringValues"
        },
        "extensions": {
          "$ref": "#/definitions/common.arrayOfStringValues"
        },
        "enforceExtension": {
          "type": "boolean"
        },
        "moduleExtensions": {
          "$ref": "#/definitions/common.arrayOfStringValues"
        },
        "enforceModuleExtension": {
          "type": "boolean"
        },
        "alias": {
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "alias": {
                    "type": "string"
                  },
                  "onlyModule": {
                    "type": "boolean"
                  }
                }
              }
            }
          ]
        },
        "symlinks": {
          "type": "boolean"
        },
        "unsafeCache": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "additionalProperties": true
            }
          ]
        },
        "cachePredicate": {
          "instanceof": "Function"
        },
        "fileSystem": {},
        "resolver": {}
      },
      "type": "object"
    }
  },
  "additionalProperties": false,
  "properties": {
    "amd": {
      "description": "Set the value of `require.amd` and `define.amd`."
    },
    "bail": {
      "description": "Report the first error as a hard error instead of tolerating it.",
      "type": "boolean"
    },
    "cache": {
      "description": "Cache generated modules and chunks to improve performance for multiple incremental builds.",
      "oneOf": [
        {
          "description": "You can pass `false` to disable it.",
          "type": "boolean"
        },
        {
          "description": "You can pass an object to enable it and let webpack use the passed object as cache. This way you can share the cache object between multiple compiler calls.",
          "type": "object"
        }
      ]
    },
    "context": {
      "description": "The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.",
      "type": "string"
    },
    "devServer": {
      "type": "object"
    },
    "devtool": {
      "description": "A developer tool to enhance debugging.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "enum": [false]
        }
      ]
    },
    "entry": {
      "$ref": "#/definitions/entry"
    },
    "externals": {
      "$ref": "#/definitions/externals"
    },
    "loader": {
      "description": "Custom values available in the loader context.",
      "type": "object"
    },
    "module": {
      "$ref": "#/definitions/module"
    },
    "name": {
      "description": "Name of the configuration. Used when loading multiple configurations.",
      "type": "string"
    },
    "dependencies": {
      "description": "References to other configurations to depend on.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "node": {
      "description": "Include polyfills or mocks for various node stuff.",
      "properties": {
        "Buffer": {
          "type": "boolean"
        },
        "__dirname": {
          "enum": [
            false,
            true,
            "mock"
          ]
        },
        "__filename": {
          "enum": [
            false,
            true,
            "mock"
          ]
        },
        "console": {
          "type": "boolean"
        },
        "global": {
          "type": "boolean"
        },
        "process": {
          "enum": [
            false,
            true,
            "mock"
          ]
        }
      },
      "type": "object"
    },
    "output": {
      "$ref": "#/definitions/output"
    },
    "plugins": {
      "description": "Add additional plugins to the compiler.",
      "type": "array"
    },
    "profile": {
      "description": "Capture timing information for each module.",
      "type": "boolean"
    },
    "recordsInputPath": {
      "description": "Store compiler state to a json file.",
      "type": "string"
    },
    "recordsOutputPath": {
      "description": "Load compiler state from a json file.",
      "type": "string"
    },
    "recordsPath": {
      "description": "Store/Load compiler state from/to a json file. This will result in persistent ids of modules and chunks. An absolute path is expected. `recordsPath` is used for `recordsInputPath` and `recordsOutputPath` if they left undefined.",
      "type": "string"
    },
    "resolve": {
      "$ref": "#/definitions/resolve"
    },
    "resolveLoader": {
      "$ref": "#/definitions/resolve"
    },
    "stats": {
      "description": "Used by the webpack CLI program to pass stats options.",
      "oneOf": [
        {
          "type": "object"
        },
        {
          "type": "boolean"
        },
        {
          "enum": [
            "none",
            "errors-only",
            "minimal",
            "normal",
            "verbose"
          ]
        }
      ]
    },
    "target": {
      "anyOf": [
        {
          "enum": [
            "web",
            "webworker",
            "node",
            "async-node",
            "node-webkit",
            "electron"
          ]
        },
        {
          "instanceof": "Function"
        }
      ]
    },
    "watch": {
      "description": "Enter watch mode, which rebuilds on file change.",
      "type": "boolean"
    },
    "watchOptions": {
      "properties": {
        "aggregateTimeout": {
          "description": "Delay the rebuilt after the first change. Value is a time in ms.",
          "type": "number"
        },
        "poll": {
          "oneOf": [
            {
              "description": "`true`: use polling.",
              "type": "boolean"
            },
            {
              "description": "`number`: use polling with specified interval.",
              "type": "number"
            }
          ]
        }
      },
      "type": "object"
    }
  },
  "required": [
    "entry"
  ],
  "type": "object"
}
