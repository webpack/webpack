{
	"additionalProperties": false,
	"definitions": {
		"common.loaders": {
			"items": {
				"properties": {
					"exclude": {
						"type": "object"
					},
					"include": {
						"type": "object"
					},
					"loader": {
						"type": "string"
					},
					"loaders": {
						"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
					},
					"test": {
						"type": "object"
					}
				},
				"type": "object"
			},
			"minItems": 1,
			"type": "array",
			"uniqueItems": true
		},
		"common.nonEmptyArrayOfUniqueStringValues": {
			"items": {
				"type": "string"
			},
			"minItems": 1,
			"type": "array",
			"uniqueItems": true
		},
		"entry": {
			"description": "The entry point for the bundle.",
			"oneOf": [
				{
					"description": "Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array.",
					"type": "object"
				},
				{
					"description": "The string is resolved to a module which is loaded upon startup.",
					"type": "string"
				},
				{
					"allOf": [
						{
							"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
						}
					],
					"description": "All modules are loaded upon startup. The last one is exported."
				}
			]
		},
		"externals": {
			"description": "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
			"oneOf": [
				{
					"description": "An exact matched dependency becomes external. The same string is used as external dependency.",
					"type": "string"
				},
				{
					"description": "If an dependency matches exactly a property of the object, the property value is used as dependency.",
					"type": "object"
				},
				{
					"description": "`function(context, request, callback(err, result))` The function is called on each dependency.",
					"instanceof": "Function"
				},
				{
					"description": "Every matched dependency becomes external.",
					"instanceof": "RegExp"
				},
				{
					"items": {
						"$ref": "#/definitions/externals"
					},
					"type": "array"
				}
			]
		},
		"module": {
			"description": "Options affecting the normal modules (`NormalModuleFactory`).",
			"properties": {
				"loaders": {
					"allOf": [
						{
							"$ref": "#/definitions/common.loaders"
						}
					],
					"description": "An array of automatically applied loaders."
				},
				"noParse": {
					"description": "Don't parse files matching. It's matched against the full resolved request.",
					"oneOf": [
						{
							"items": {
								"instanceof": "RegExp"
							},
							"minItems": 1,
							"type": "array",
							"uniqueItems": true
						},
						{
							"instanceof": "RegExp"
						}
					]
				},
				"postLoaders": {
					"allOf": [
						{
							"$ref": "#/definitions/common.loaders"
						}
					],
					"description": "An array of automatically applied loaders."
				},
				"preLoaders": {
					"allOf": [
						{
							"$ref": "#/definitions/common.loaders"
						}
					],
					"description": "An array of automatically applied loaders."
				}
			},
			"type": "object"
		},
		"output": {
			"additionalProperties": false,
			"description": "Options affecting the output of the compilation. `output` options tell webpack how to write the compiled files to disk.",
			"properties": {
				"auxiliaryComment": {
					"description": "Add a comment in the UMD wrapper.",
					"oneOf": [
						{
							"description": "Append the same comment above each import style.",
							"type": "string"
						},
						{
							"additionalProperties": false,
							"description": "Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.",
							"properties": {
								"amd": {
									"type": "string"
								},
								"commonjs": {
									"type": "string"
								},
								"commonjs2": {
									"type": "string"
								},
								"root": {
									"type": "string"
								}
							},
							"type": "object"
						}
					]
				},
				"chunkFilename": {
					"description": "The filename of non-entry chunks as relative path inside the `output.path` directory.",
					"type": "string"
				},
				"crossOriginLoading": {
					"description": "This option enables cross-origin loading of chunks.",
					"enum": [
						false,
						"anonymous",
						"use-credentials"
					]
				},
				"devtoolFallbackModuleFilenameTemplate": {
					"description": "Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.",
					"type": "string"
				},
				"devtoolLineToLine": {
					"description": "Enable line to line mapped mode for all/specified modules. Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source. Itâ€™s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.",
					"oneOf": [
						{
							"description": "`true` enables it for all modules (not recommended)",
							"type": "boolean"
						},
						{
							"description": "An object similar to `module.loaders` enables it for specific files.",
							"properties": {
								"exclude": {
									"type": "string"
								},
								"include": {
									"type": "string"
								},
								"test": {
									"type": "string"
								}
							},
							"type": "object"
						}
					]
				},
				"devtoolModuleFilenameTemplate": {
					"description": "Filename template string of function for the sources array in a generated SourceMap.",
					"oneOf": [
						{
							"type": "string"
						},
						{
							"instanceof": "Function"
						}
					]
				},
				"filename": {
					"description": "Specifies the name of each output file on disk. You must **not** specify an absolute path here! The `output.path` option determines the location on disk the files are written to, filename is used solely for naming the individual files.",
					"type": "string"
				},
				"hotUpdateChunkFilename": {
					"description": "The filename of the Hot Update Chunks. They are inside the output.path directory.",
					"type": "string"
				},
				"hotUpdateFunction": {
					"description": "The JSONP function used by webpack for async loading of hot update chunks.",
					"type": "string"
				},
				"hotUpdateMainFilename": {
					"description": "The filename of the Hot Update Main File. It is inside the `output.path` directory.",
					"type": "string"
				},
				"jsonpFunction": {
					"description": "The JSONP function used by webpack for async loading of chunks.",
					"type": "string"
				},
				"library": {
					"description": "If set, export the bundle as library. `output.library` is the name.",
					"type": "string"
				},
				"libraryTarget": {
					"enum": [
						"var",
						"this",
						"commonjs",
						"commonjs2",
						"amd",
						"umd"
					]
				},
				"path": {
					"description": "The output directory as **absolute path** (required).",
					"type": "string"
				},
				"pathinfo": {
					"description": "Include comments with information about the modules.",
					"type": "boolean"
				},
				"publicPath": {
					"description": "The `publicPath` specifies the public URL address of the output files when referenced in a browser.",
					"type": "string"
				},
				"sourceMapFilename": {
					"description": "The filename of the SourceMaps for the JavaScript files. They are inside the `output.path` directory.",
					"type": "string"
				},
				"sourcePrefix": {
					"description": "Prefixes every line of the source in the bundle with this string.",
					"type": "string"
				},
				"umdNamedDefine": {
					"description": "If `output.libraryTarget` is set to umd and `output.library` is set, setting this to true will name the AMD module.",
					"type": "boolean"
				}
			},
			"type": "object"
		},
		"resolve": {
			"additionalProperties": false,
			"properties": {
				"alias": {
					"type": "object"
				},
				"extensions": {
					"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
				},
				"fallback": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
						}
					]
				},
				"modulesDirectories": {
					"items": {
						"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
					}
				},
				"packageAlias": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "object"
						}
					]
				},
				"packageMains": {
					"minItems": 1,
					"type": "array",
					"uniqueItems": true
				},
				"root": {
					"type": "string"
				},
				"unsafeCache": {
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "array"
						},
						{
							"type": "object"
						}
					]
				}
			},
			"type": "object"
		},
		"resolveLoader": {
			"additionalProperties": false,
			"properties": {
				"extensions": {
					"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
				},
				"moduleTemplates": {
					"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
				},
				"modulesDirectories": {
					"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
				},
				"packageMains": {
					"ref": "#/definitions/common.nonEmptyArrayOfUniqueStringValues"
				}
			},
			"type": "object"
		}
	},
	"properties": {
		"amd": {
			"description": "Set the value of `require.amd` and `define.amd`."
		},
		"bail": {
			"description": "Report the first error as a hard error instead of tolerating it.",
			"type": "boolean"
		},
		"cache": {
			"description": "Cache generated modules and chunks to improve performance for multiple incremental builds.",
			"oneOf": [
				{
					"description": "You can pass `false` to disable it.",
					"type": "boolean"
				},
				{
					"description": "You can pass an object to enable it and let webpack use the passed object as cache. This way you can share the cache object between multiple compiler calls.",
					"type": "object"
				}
			]
		},
		"context": {
			"description": "The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.",
			"type": "string"
		},
		"debug": {
			"description": "Switch loaders to debug mode.",
			"type": "boolean"
		},
		"devServer": {
			"type": "object"
		},
		"devtool": {
			"description": "A developer tool to enhance debugging.",
			"type": "string"
		},
		"entry": {
			"#ref": "#/definitions/entry"
		},
		"externals": {
			"#ref": "#/definitions/externals"
		},
		"loader": {
			"description": "Custom values available in the loader context.",
			"type": "object"
		},
		"module": {
			"#ref": "#/definitions/module"
		},
		"node": {
			"description": "Include polyfills or mocks for various node stuff.",
			"properties": {
				"Buffer": {
					"type": "boolean"
				},
				"__dirname": {
					"enum": [
						false,
						true,
						"mock"
					]
				},
				"__filename": {
					"enum": [
						false,
						true,
						"mock"
					]
				},
				"console": {
					"type": "boolean"
				},
				"global": {
					"type": "boolean"
				},
				"process": {
					"enum": [
						false,
						true,
						"mock"
					]
				}
			},
			"type": "object"
		},
		"output": {
			"#ref": "#/definitions/output"
		},
		"plugins": {
			"description": "Add additional plugins to the compiler.",
			"type": "array"
		},
		"profile": {
			"description": "Capture timing information for each module.",
			"type": "boolean"
		},
		"recordsInputPath": {
			"description": "Store compiler state to a json file.",
			"type": "string"
		},
		"recordsOutputPath": {
			"description": "Load compiler state from a json file.",
			"type": "string"
		},
		"recordsPath": {
			"description": "Store/Load compiler state from/to a json file. This will result in persistent ids of modules and chunks. An absolute path is expected. `recordsPath` is used for `recordsInputPath` and `recordsOutputPath` if they left undefined.",
			"type": "string"
		},
		"resolve": {
			"#ref": "#/definitions/resolve"
		},
		"resolveLoader": {
			"#ref": "#/definitions/resolveLoader"
		},
		"target": {
			"enum": [
				"web",
				"webworker",
				"node",
				"async-node",
				"node-webkit",
				"electron"
			]
		},
		"watch": {
			"description": "Enter watch mode, which rebuilds on file change.",
			"type": "boolean"
		},
		"watchOptions": {
			"properties": {
				"aggregateTimeout": {
					"description": "Delay the rebuilt after the first change. Value is a time in ms.",
					"type": "number"
				},
				"poll": {
					"oneOf": [
						{
							"description": "`true`: use polling.",
							"type": "boolean"
						},
						{
							"description": "`number`: use polling with specified interval.",
							"type": "number"
						}
					]
				}
			},
			"type": "object"
		}
	},
	"required": [
		"entry"
	],
	"type": "object"
}
